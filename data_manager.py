from tree_factory import TreeFactory
import json
import os
import pickle

class DataManager:
    def __init__(self, db_dir="./db"):
        # Директорія для зберігання файлів бази даних
        self.db_dir = db_dir
        # Словник для зберігання таблиць та їх схем
        self.databases = {}
        # Поточна вибрана база даних
        self.current_db = None
        # Ініціалізація сховища
        self._init_storage()
        
    def _init_storage(self):
        """Ініціалізація структури сховища"""
        # TODO: Створити директорію, якщо вона не існує
        # TODO: Завантажити існуючі бази даних
        pass
    
    def _load_databases(self):
        """Завантаження інформації про існуючі бази даних"""
        # TODO: Завантажити meta.json, якщо він існує
        pass
    
    def _save_databases(self):
        """Збереження метаданих бази даних"""
        # TODO: Зберегти інформацію у файл meta.json
        pass
    
    def create_database(self, db_name):
        """Створення нової бази даних"""
        # TODO: Перевірити чи база даних вже існує
        # TODO: Створити директорію для бази даних
        # TODO: Додати базу даних до метаданих
        # TODO: Зберегти метадані
        pass
    
    def use_database(self, db_name):
        """Вибір бази даних для використання"""
        # TODO: Перевірити чи база даних існує
        # TODO: Встановити поточну базу даних
        pass
    
    def create_table(self, table_name, columns, tree_type="avl"):
        """Створення нової таблиці в поточній базі даних"""
        # TODO: Перевірити чи вибрана база даних
        # TODO: Перевірити чи таблиця вже існує
        # TODO: Створити метадані таблиці (стовпці, тип дерева, первинний ключ)
        # TODO: Зберегти метадані
        # TODO: Створити порожнє дерево-індекс
        # TODO: Зберегти файл таблиці
        pass
    
    def insert(self, table_name, values):
        """Вставка запису в таблицю"""
        # TODO: Перевірити чи вибрана база даних
        # TODO: Перевірити чи таблиця існує
        # TODO: Завантажити дані таблиці
        # TODO: Отримати колонку первинного ключа
        # TODO: Перевірити чи первинний ключ вже існує
        # TODO: Вставити у дерево та дані
        # TODO: Зберегти оновлені дані
        pass
    
    def select(self, table_name, conditions=None):
        """Вибрати записи з таблиці"""
        # TODO: Перевірити чи вибрана база даних
        # TODO: Перевірити чи таблиця існує
        # TODO: Завантажити дані таблиці
        # TODO: Отримати стовпці
        # TODO: Якщо немає умов, повернути всі дані
        # TODO: Розібрати умови та відфільтрувати дані
        pass
    
    def update(self, table_name, updates, conditions=None):
        """Оновлення записів у таблиці"""
        # TODO: Перевірити чи вибрана база даних
        # TODO: Перевірити чи таблиця існує
        # TODO: Завантажити дані таблиці
        # TODO: Отримати стовпці та первинний ключ
        # TODO: Для кожного ключа перевірити умову і оновити дані
        # TODO: Якщо оновлюється первинний ключ, видалити старий запис і вставити новий
        # TODO: Зберегти оновлені дані
        pass
    
    def delete(self, table_name, conditions=None):
        """Видалення записів з таблиці"""
        # TODO: Перевірити чи вибрана база даних
        # TODO: Перевірити чи таблиця існує
        # TODO: Завантажити дані таблиці
        # TODO: Отримати стовпці
        # TODO: Знайти ключі для видалення
        # TODO: Видалити записи
        # TODO: Зберегти оновлені дані
        pass
    
    def _evaluate_condition(self, record, columns, condition):
        """Оцінка умови для запису"""
        # TODO: Отримати індекс стовпця
        # TODO: Порівняти значення запису з умовою за допомогою відповідного оператора
        pass